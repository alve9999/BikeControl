cmake_minimum_required(VERSION 3.8)
project(control_estimation)
set(CMAKE_CXX_STANDARD 11)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options()
endif()
add_compile_options(-std=c++17)

set(CPPAD_INCLUDE_DIR "/root/include")
set(CPPAD_LIBRARIES "/root/lib64")

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(nav_msgs REQUIRED)
include_directories(/usr/local/include)
link_directories(/usr/local/lib)
include_directories(${CPPAD_INCLUDE_DIR})
if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

add_executable(estimation src/estimation.cpp)
target_link_libraries(estimation Eigen3::Eigen)
target_link_libraries(estimation /root/lib64/libcppad_lib.so)
ament_target_dependencies(estimation rclcpp std_msgs visualization_msgs nav_msgs)
target_link_libraries(estimation ipopt)
install(TARGETS
  estimation
  DESTINATION lib/${PROJECT_NAME})
  
ament_package()
